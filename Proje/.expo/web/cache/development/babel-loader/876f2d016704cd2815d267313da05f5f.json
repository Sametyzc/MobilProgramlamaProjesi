{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\MONSTER\\\\Desktop\\\\MobilProgramlamaProjesi\\\\Proje\\\\screens\\\\ToDoAgendaScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Agenda, LocaleConfig } from \"react-native-calendars\";\nimport Constants from \"expo-constants\";\nimport * as SQLite from \"expo-sqlite\";\nLocaleConfig.locales[\"tr\"] = {\n  monthNames: [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"],\n  monthNamesShort: [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"],\n  dayNames: [\"Pazartesi\", \"Salı\", \"Çarşamba\", \"Perşembe\", \"Cuma\", \"Cumartesi\", \"Pazar\"],\n  dayNamesShort: [\"Pzt\", \"Salı\", \"Çrş\", \"Prş\", \"Cuma\", \"Cts\", \"Pazar\"],\n  today: \"Bugün\"\n};\nLocaleConfig.defaultLocale = \"tr\";\nvar vacation = {\n  key: \"vacation\",\n  color: \"red\",\n  selectedDotColor: \"blue\"\n};\nvar massage = {\n  key: \"massage\",\n  color: \"blue\",\n  selectedDotColor: \"blue\"\n};\nvar workout = {\n  key: \"workout\",\n  color: \"green\"\n};\n\nvar ToDoAgendaScreen = function (_React$Component) {\n  _inherits(ToDoAgendaScreen, _React$Component);\n\n  var _super = _createSuper(ToDoAgendaScreen);\n\n  function ToDoAgendaScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ToDoAgendaScreen);\n\n    _this = _super.call(this, props);\n    var dateNow = new Date();\n    var dateNowAsString = dateNow.getFullYear() + \"-\" + (dateNow.getMonth() + 1) + \"-\" + dateNow.getDate();\n    _this.state = {\n      dateNow: dateNow,\n      dateNowAsString: dateNowAsString,\n      items: {}\n    };\n    return _this;\n  }\n\n  _createClass(ToDoAgendaScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Agenda, {\n        items: {\n          \"2020-12-14\": [{\n            name: \"ekmek al\"\n          }, {\n            name: \"2020-12-14 item 2\"\n          }, {\n            name: \"2020-12-14 item 3\"\n          }],\n          \"2020-12-15\": [{\n            name: \"item 2 - any js object\",\n            height: 80\n          }],\n          \"2020-12-16\": [],\n          \"2020-12-17\": [{\n            name: \"item 3 - any js object\"\n          }, {\n            name: \"any js object\"\n          }]\n        },\n        loadItemsForMonth: this.loadItems.bind(this),\n        renderDay: this.renderDay.bind(this),\n        renderItem: this.renderItem.bind(this),\n        renderEmptyDate: this.renderEmptyDate.bind(this),\n        rowHasChanged: this.rowHasChanged.bind(this),\n        markingType: \"multi-dot\",\n        markedDates: {\n          \"2020-12-14\": {\n            dots: [vacation, massage, workout]\n          },\n          \"2020-12-15\": {\n            dots: [massage, workout]\n          }\n        },\n        theme: {\n          textSectionTitleColor: \"#b6c1cd\",\n          textSectionTitleDisabledColor: \"#d9e1e8\",\n          selectedDayTextColor: \"#fff\",\n          todayTextColor: \"#36a1ff\",\n          dayTextColor: \"#2d4150\",\n          monthTextColor: \"black\",\n          indicatorColor: \"black\",\n          textDayFontWeight: \"300\",\n          textMonthFontWeight: \"bold\",\n          textDayFontWeight: \"bold\",\n          textDayHeaderFontWeight: \"300\",\n          textDayFontSize: 16,\n          textMonthFontSize: 16,\n          textDayHeaderFontSize: 16,\n          agendaKnobColor: \"#66b7ff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"loadItems\",\n    value: function loadItems(day) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        for (var i = -15; i < 85; i++) {\n          var time = day.timestamp + i * 24 * 60 * 60 * 1000;\n\n          var strTime = _this2.timeToString(time);\n\n          if (!_this2.state.items[strTime]) {\n            _this2.state.items[strTime] = [];\n            var numItems = Math.floor(Math.random() * 3 + 1);\n\n            for (var j = 0; j < numItems; j++) {\n              _this2.state.items[strTime].push({\n                name: \"Item for \" + strTime + \" #\" + j,\n                height: Math.max(50, Math.floor(Math.random() * 150)),\n                done: Math.round(Math.random())\n              });\n            }\n          }\n        }\n\n        var newItems = {};\n        Object.keys(_this2.state.items).forEach(function (key) {\n          newItems[key] = _this2.state.items[key];\n        });\n\n        _this2.setState({\n          items: newItems\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"renderDay\",\n    value: function renderDay(day, item) {\n      if (typeof day === \"undefined\") {\n        return;\n      }\n\n      var d = new Date(day.dateString);\n      var dayName = LocaleConfig.locales[\"tr\"].dayNamesShort[d.getDay() - 1];\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: \"column\",\n          position: \"absolute\",\n          margin: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: day.dateString === this.state.dateNowAsString ? \"#66b7ff\" : \"#535f69\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }\n      }, day.day), React.createElement(Text, {\n        style: [styles.dayName, {\n          color: day.dateString === this.state.dateNowAsString ? \"#66b7ff\" : \"#535f69\"\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 9\n        }\n      }, dayName));\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item) {\n      return React.createElement(View, {\n        style: [styles.item],\n        onPress: function onPress() {\n          return Alert.alert(item.name);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          textDecorationLine: item.done ? \"line-through\" : \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      }, item.name));\n    }\n  }, {\n    key: \"renderEmptyDate\",\n    value: function renderEmptyDate() {\n      return React.createElement(View, {\n        style: styles.item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }\n      }, \"This is empty date!\"));\n    }\n  }, {\n    key: \"rowHasChanged\",\n    value: function rowHasChanged(r1, r2) {\n      return r1.name !== r2.name;\n    }\n  }, {\n    key: \"timeToString\",\n    value: function timeToString(time) {\n      var date = new Date(time);\n      return date.toISOString().split(\"T\")[0];\n    }\n  }]);\n\n  return ToDoAgendaScreen;\n}(React.Component);\n\nexport { ToDoAgendaScreen as default };\nvar styles = StyleSheet.create({\n  item: {\n    backgroundColor: \"white\",\n    flex: 1,\n    padding: 10,\n    marginTop: 5,\n    marginBottom: 5,\n    marginLeft: 50\n  },\n  dayName: {\n    fontSize: 12\n  }\n});","map":{"version":3,"sources":["C:/Users/MONSTER/Desktop/MobilProgramlamaProjesi/Proje/screens/ToDoAgendaScreen.js"],"names":["React","Agenda","LocaleConfig","Constants","SQLite","locales","monthNames","monthNamesShort","dayNames","dayNamesShort","today","defaultLocale","vacation","key","color","selectedDotColor","massage","workout","ToDoAgendaScreen","props","dateNow","Date","dateNowAsString","getFullYear","getMonth","getDate","state","items","name","height","loadItems","bind","renderDay","renderItem","renderEmptyDate","rowHasChanged","dots","textSectionTitleColor","textSectionTitleDisabledColor","selectedDayTextColor","todayTextColor","dayTextColor","monthTextColor","indicatorColor","textDayFontWeight","textMonthFontWeight","textDayHeaderFontWeight","textDayFontSize","textMonthFontSize","textDayHeaderFontSize","agendaKnobColor","day","setTimeout","i","time","timestamp","strTime","timeToString","numItems","Math","floor","random","j","push","max","done","round","newItems","Object","keys","forEach","setState","item","d","dateString","dayName","getDay","flex","flexDirection","position","margin","fontSize","styles","Alert","alert","textDecorationLine","r1","r2","date","toISOString","split","Component","StyleSheet","create","backgroundColor","padding","marginTop","marginBottom","marginLeft"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Alert,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  TextInput,\r\n} from \"react-native\";\r\nimport { Agenda, LocaleConfig } from \"react-native-calendars\";\r\nimport Constants from \"expo-constants\";\r\nimport * as SQLite from \"expo-sqlite\";\r\n\r\n\r\n//Ajanda da gösterilecek olan ay ve gün isimleri atandı.\r\nLocaleConfig.locales[\"tr\"] = {\r\n  monthNames: [\r\n    \"Ocak\",\r\n    \"Şubat\",\r\n    \"Mart\",\r\n    \"Nisan\",\r\n    \"Mayıs\",\r\n    \"Haziran\",\r\n    \"Temmuz\",\r\n    \"Ağustos\",\r\n    \"Eylül\",\r\n    \"Ekim\",\r\n    \"Kasım\",\r\n    \"Aralık\",\r\n  ],\r\n  monthNamesShort: [\r\n    \"Ocak\",\r\n    \"Şubat\",\r\n    \"Mart\",\r\n    \"Nisan\",\r\n    \"Mayıs\",\r\n    \"Haziran\",\r\n    \"Temmuz\",\r\n    \"Ağustos\",\r\n    \"Eylül\",\r\n    \"Ekim\",\r\n    \"Kasım\",\r\n    \"Aralık\",\r\n  ],\r\n  dayNames: [\r\n    \"Pazartesi\",\r\n    \"Salı\",\r\n    \"Çarşamba\",\r\n    \"Perşembe\",\r\n    \"Cuma\",\r\n    \"Cumartesi\",\r\n    \"Pazar\",\r\n  ],\r\n  dayNamesShort: [\"Pzt\", \"Salı\", \"Çrş\", \"Prş\", \"Cuma\", \"Cts\", \"Pazar\"],\r\n  today: \"Bugün\",\r\n};\r\nLocaleConfig.defaultLocale = \"tr\";\r\n\r\nconst vacation = { key: \"vacation\", color: \"red\", selectedDotColor: \"blue\" };\r\nconst massage = { key: \"massage\", color: \"blue\", selectedDotColor: \"blue\" };\r\nconst workout = { key: \"workout\", color: \"green\" };\r\n\r\nexport default class ToDoAgendaScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    var dateNow = new Date();\r\n    var dateNowAsString =\r\n      dateNow.getFullYear() +\r\n      \"-\" +\r\n      (dateNow.getMonth() + 1) +\r\n      \"-\" +\r\n      dateNow.getDate();\r\n    this.state = {\r\n      dateNow: dateNow,\r\n      dateNowAsString: dateNowAsString,\r\n      items: {},\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Agenda\r\n        items={{\r\n          \"2020-12-14\": [\r\n            { name: \"ekmek al\" },\r\n            { name: \"2020-12-14 item 2\" },\r\n            { name: \"2020-12-14 item 3\" },\r\n          ],\r\n          \"2020-12-15\": [{ name: \"item 2 - any js object\", height: 80 }],\r\n          \"2020-12-16\": [],\r\n          \"2020-12-17\": [\r\n            { name: \"item 3 - any js object\" },\r\n            { name: \"any js object\" },\r\n          ],\r\n        }}\r\n        // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n        loadItemsForMonth={this.loadItems.bind(this)}\r\n        renderDay={this.renderDay.bind(this)}\r\n        renderItem={this.renderItem.bind(this)}\r\n        renderEmptyDate={this.renderEmptyDate.bind(this)}\r\n        rowHasChanged={this.rowHasChanged.bind(this)}\r\n        markingType={\"multi-dot\"}\r\n        markedDates={{\r\n          \"2020-12-14\": {\r\n            dots: [vacation, massage, workout],\r\n          },\r\n          \"2020-12-15\": { dots: [massage, workout]},\r\n        }}\r\n        theme={{\r\n          //CalendarList için tema\r\n          textSectionTitleColor: \"#b6c1cd\",\r\n          textSectionTitleDisabledColor: \"#d9e1e8\",\r\n          selectedDayTextColor: \"#fff\",\r\n          todayTextColor: \"#36a1ff\",\r\n          dayTextColor: \"#2d4150\",\r\n          monthTextColor: \"black\",\r\n          indicatorColor: \"black\",\r\n          textDayFontWeight: \"300\",\r\n          textMonthFontWeight: \"bold\",\r\n          textDayFontWeight: \"bold\",\r\n          textDayHeaderFontWeight: \"300\",\r\n          textDayFontSize: 16,\r\n          textMonthFontSize: 16,\r\n          textDayHeaderFontSize: 16,\r\n          //Agenda için tema\r\n          agendaKnobColor: \"#66b7ff\",\r\n        }}\r\n        //renderDay={(day, item) => (<Text>{day ? day.day: 'item'}</Text>)}\r\n        //hideExtraDays={false}\r\n      />\r\n    );\r\n  }\r\n\r\n  loadItems(day) {\r\n    setTimeout(() => {\r\n      for (let i = -15; i < 85; i++) {\r\n        const time = day.timestamp + i * 24 * 60 * 60 * 1000;\r\n        const strTime = this.timeToString(time);\r\n        if (!this.state.items[strTime]) {\r\n          this.state.items[strTime] = [];\r\n          const numItems = Math.floor(Math.random() * 3 + 1);\r\n          for (let j = 0; j < numItems; j++) {\r\n            this.state.items[strTime].push({\r\n              name: \"Item for \" + strTime + \" #\" + j,\r\n              height: Math.max(50, Math.floor(Math.random() * 150)),\r\n              done: Math.round(Math.random()),\r\n            });\r\n          }\r\n        }\r\n      }\r\n      const newItems = {};\r\n      Object.keys(this.state.items).forEach((key) => {\r\n        newItems[key] = this.state.items[key];\r\n      });\r\n      this.setState({\r\n        items: newItems,\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  renderDay(day, item) {\r\n    if (typeof day === \"undefined\") {\r\n      return;\r\n    }\r\n    var d = new Date(day.dateString);\r\n    var dayName = LocaleConfig.locales[\"tr\"].dayNamesShort[d.getDay() - 1];\r\n    return (\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          flexDirection: \"column\",\r\n          position: \"absolute\",\r\n          margin: 15,\r\n        }}\r\n      >\r\n        <Text\r\n          style={{\r\n            fontSize: 20,\r\n            color:\r\n              day.dateString === this.state.dateNowAsString\r\n                ? \"#66b7ff\"\r\n                : \"#535f69\",\r\n          }}\r\n        >\r\n          {day.day}\r\n        </Text>\r\n        <Text\r\n          style={[\r\n            styles.dayName,\r\n            {\r\n              color:\r\n                day.dateString === this.state.dateNowAsString\r\n                  ? \"#66b7ff\"\r\n                  : \"#535f69\",\r\n            },\r\n          ]}\r\n        >\r\n          {dayName}\r\n        </Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  renderItem(item) {\r\n    return (\r\n      <View style={[styles.item]} onPress={() => Alert.alert(item.name)}>\r\n        <Text\r\n          style={{ textDecorationLine: item.done ? \"line-through\" : \"none\" }}\r\n        >\r\n          {item.name}\r\n        </Text>\r\n      </View>\r\n    );\r\n  }\r\n  renderEmptyDate() {\r\n    return (\r\n      <View style={styles.item}>\r\n        <Text>This is empty date!</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  rowHasChanged(r1, r2) {\r\n    return r1.name !== r2.name;\r\n  }\r\n\r\n  timeToString(time) {\r\n    const date = new Date(time);\r\n    return date.toISOString().split(\"T\")[0];\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  item: {\r\n    backgroundColor: \"white\",\r\n    flex: 1,\r\n    padding: 10,\r\n    marginTop: 5,\r\n    marginBottom: 5,\r\n    marginLeft: 50,\r\n  },\r\n  dayName: {\r\n    fontSize: 12,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}