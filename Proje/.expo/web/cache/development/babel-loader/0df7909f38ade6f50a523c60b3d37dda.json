{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\MONSTER\\\\Desktop\\\\MobilProgramlamaProjesi\\\\Proje\\\\screens\\\\AddTodoItemScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Input } from \"react-native-elements\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Card, ListItem, Button, Icon } from \"react-native-elements\";\nimport ColorPalette from \"react-native-color-palette\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\n\nvar AddTodoItemScreen = function (_React$Component) {\n  _inherits(AddTodoItemScreen, _React$Component);\n\n  var _super = _createSuper(AddTodoItemScreen);\n\n  function AddTodoItemScreen(props) {\n    var _this;\n\n    _classCallCheck(this, AddTodoItemScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      iconColor: \"black\",\n      iconName: \"clear\",\n      selectedColor: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(AddTodoItemScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(KeyboardAvoidingView, {\n        style: styles.container,\n        behavior: Platform.OS == \"ios\" ? \"padding\" : \"height\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, React.createElement(Card.Title, {\n        h4: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }, \"Add To Do Form\"), React.createElement(Card.Divider, {\n        style: {\n          backgroundColor: \"black\",\n          height: 2\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        style: styles.header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }, \"Enter To Do Item\"), React.createElement(Input, {\n        placeholder: \"Type Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }), React.createElement(Card.Divider, {\n        style: {\n          backgroundColor: \"gray\",\n          height: 1.5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        style: styles.header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }, \"Select Date\"), React.createElement(View, {\n        style: {\n          marginLeft: \"30%\",\n          paddingBottom: 7\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      }, React.createElement(DateTimePicker, {\n        minimumDate: new Date(),\n        value: new Date(),\n        mode: \"date\",\n        display: \"default\",\n        onChange: this.dateTimePickerOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      })), React.createElement(Card.Divider, {\n        style: {\n          backgroundColor: \"gray\",\n          height: 1.5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        style: styles.header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, \"Select A Dot Color\"), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, React.createElement(ColorPalette, {\n        onChange: this.colorPaletteOnChange.bind(this),\n        colors: [\"#fff\", \"#C0392B\", \"#0a801f\", \"#2978f0\", \"#9B59B6\", \"#edf035\"],\n        defaultColor: \"#fff\",\n        title: \"\",\n        icon: React.createElement(Icon, {\n          name: this.state.iconName,\n          size: 25,\n          color: this.state.iconColor,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      })), React.createElement(Card.Divider, {\n        style: {\n          backgroundColor: \"gray\",\n          height: 1.5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      })));\n    }\n  }, {\n    key: \"dateTimePickerOnChange\",\n    value: function dateTimePickerOnChange(event, selectedDate) {}\n  }, {\n    key: \"colorPaletteOnChange\",\n    value: function colorPaletteOnChange(color) {\n      if (color === \"#fff\") {\n        this.setState({\n          iconName: \"clear\"\n        });\n        this.setState({\n          iconColor: \"black\"\n        });\n        this.setState({\n          selectedColor: \"\"\n        });\n      } else {\n        this.setState({\n          iconName: \"done\"\n        });\n        this.setState({\n          iconColor: \"white\"\n        });\n        this.setState({\n          selectedColor: color\n        });\n      }\n    }\n  }]);\n\n  return AddTodoItemScreen;\n}(React.Component);\n\nexport { AddTodoItemScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  inner: {\n    padding: 24,\n    flex: 1,\n    justifyContent: \"space-around\"\n  },\n  dateContainer: {},\n  header: {\n    fontWeight: \"bold\",\n    color: \"black\",\n    padding: 5,\n    margin: 5\n  }\n});","map":{"version":3,"sources":["C:/Users/MONSTER/Desktop/MobilProgramlamaProjesi/Proje/screens/AddTodoItemScreen.js"],"names":["React","Input","Card","ListItem","Button","Icon","ColorPalette","DateTimePicker","AddTodoItemScreen","props","state","iconColor","iconName","selectedColor","styles","container","Platform","OS","backgroundColor","height","header","marginLeft","paddingBottom","Date","dateTimePickerOnChange","colorPaletteOnChange","bind","event","selectedDate","color","setState","Component","StyleSheet","create","flex","inner","padding","justifyContent","dateContainer","fontWeight","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Input } from \"react-native-elements\";\r\nimport {\r\n  Alert,\r\n  StyleSheet,\r\n  KeyboardAvoidingView,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  Keyboard,\r\n} from \"react-native\";\r\nimport { Card, ListItem, Button, Icon } from \"react-native-elements\";\r\nimport ColorPalette from \"react-native-color-palette\";\r\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\r\n\r\nexport default class AddTodoItemScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      iconColor: \"black\",\r\n      iconName: \"clear\",\r\n      selectedColor: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <KeyboardAvoidingView\r\n        style={styles.container}\r\n        behavior={Platform.OS == \"ios\" ? \"padding\" : \"height\"}\r\n      >\r\n        <Card>\r\n          <Card.Title h4>Add To Do Form</Card.Title>\r\n          <Card.Divider style={{ backgroundColor: \"black\", height: 2 }} />\r\n          <Text style={styles.header}>Enter To Do Item</Text>\r\n          <Input placeholder=\"Type Name\" />\r\n          <Card.Divider style={{ backgroundColor: \"gray\", height: 1.5 }} />\r\n          <Text style={styles.header}>Select Date</Text>\r\n          <View style={{ marginLeft: \"30%\", paddingBottom: 7 }}>\r\n            <DateTimePicker\r\n              minimumDate={new Date()}\r\n              value={new Date()}\r\n              mode=\"date\"\r\n              display=\"default\"\r\n              onChange={this.dateTimePickerOnChange}\r\n            />\r\n          </View>\r\n          <Card.Divider style={{ backgroundColor: \"gray\", height: 1.5 }} />\r\n          <Text style={styles.header}>Select A Dot Color</Text>\r\n          <View>\r\n            <ColorPalette\r\n              onChange={this.colorPaletteOnChange.bind(this)}\r\n              colors={[\r\n                \"#fff\",\r\n                \"#C0392B\",\r\n                \"#0a801f\",\r\n                \"#2978f0\",\r\n                \"#9B59B6\",\r\n                \"#edf035\",\r\n              ]}\r\n              defaultColor={\"#fff\"}\r\n              title={\"\"}\r\n              icon={\r\n                <Icon\r\n                  name={this.state.iconName}\r\n                  size={25}\r\n                  color={this.state.iconColor}\r\n                />\r\n              }\r\n            />\r\n          </View>\r\n          <Card.Divider style={{ backgroundColor: \"gray\", height: 1.5 }} />\r\n        </Card>\r\n      </KeyboardAvoidingView>\r\n    );\r\n  }\r\n\r\n  dateTimePickerOnChange(event, selectedDate) {}\r\n\r\n  colorPaletteOnChange(color) {\r\n    if (color === \"#fff\") {\r\n      this.setState({iconName: \"clear\"});\r\n      this.setState({iconColor: \"black\"});\r\n      this.setState({selectedColor: \"\"});\r\n    }\r\n    else{\r\n      this.setState({iconName: \"done\"});\r\n      this.setState({iconColor: \"white\"});\r\n      this.setState({selectedColor: color});\r\n    }\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  inner: {\r\n    padding: 24,\r\n    flex: 1,\r\n    justifyContent: \"space-around\",\r\n  },\r\n  dateContainer: {},\r\n  header: {\r\n    fontWeight: \"bold\",\r\n    color: \"black\",\r\n    padding: 5,\r\n    margin: 5,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}