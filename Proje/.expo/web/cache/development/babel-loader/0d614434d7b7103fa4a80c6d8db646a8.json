{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\MONSTER\\\\Desktop\\\\MobilProgramlamaProjesi\\\\Proje\\\\node_modules\\\\react-native-color-palette\\\\src\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect, Fragment, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ColorOption from \"./color-option\";\n\nvar ColorPalette = function ColorPalette(props) {\n  var colors = props.colors,\n      defaultColor = props.defaultColor,\n      icon = props.icon,\n      onChange = props.onChange,\n      paletteStyles = props.paletteStyles,\n      scaleToWindow = props.scaleToWindow,\n      title = props.title,\n      titleStyles = props.titleStyles,\n      value = props.value;\n\n  var _useState = useState(value || defaultColor),\n      _useState2 = _slicedToArray(_useState, 2),\n      color = _useState2[0],\n      setColor = _useState2[1];\n\n  useEffect(function () {\n    value && setColor(value);\n  }, [value]);\n  var onColorChange = useCallback(function (color) {\n    setColor(color);\n    onChange(color);\n  }, [onChange]);\n  return React.createElement(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: [styles.titleStyles, _objectSpread({}, titleStyles)],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, title), React.createElement(View, {\n    style: [styles.colorContainer, _objectSpread({}, paletteStyles)],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, colors.map(function (c) {\n    return React.createElement(ColorOption, {\n      key: c,\n      color: c,\n      icon: icon,\n      onColorChange: onColorChange,\n      scaleToWindow: scaleToWindow,\n      isSelected: value ? value === c : color === c,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    });\n  })));\n};\n\nvar styles = StyleSheet.create({\n  titleStyles: {\n    color: 'black'\n  },\n  colorContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nColorPalette.defaultProps = {\n  colors: ['#C0392B', '#E74C3C', '#9B59B6', '#8E44AD', '#2980B9', '#3498DB', '#1ABC9C', '#16A085', '#27AE60', '#2ECC71', '#F1C40F', '#F39C12', '#E67E22', '#D35400', '#FFFFFF', '#BDC3C7', '#95A5A6', '#7F8C8D', '#34495E', '#2C3E50', '#000000'],\n  defaultColor: null,\n  onChange: function onChange() {},\n  paletteStyles: {},\n  scaleToWindow: false,\n  title: \"Color Palette:\",\n  titleStyles: {},\n  value: null\n};\nColorPalette.propTypes = {\n  colors: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string,\n  onChange: PropTypes.func,\n  defaultColor: PropTypes.string,\n  value: PropTypes.string,\n  paletteStyles: PropTypes.shape({})\n};\nexport default ColorPalette;","map":{"version":3,"sources":["C:/Users/MONSTER/Desktop/MobilProgramlamaProjesi/Proje/node_modules/react-native-color-palette/src/index.js"],"names":["PropTypes","React","useState","useEffect","Fragment","useCallback","ColorOption","ColorPalette","props","colors","defaultColor","icon","onChange","paletteStyles","scaleToWindow","title","titleStyles","value","color","setColor","onColorChange","styles","colorContainer","map","c","StyleSheet","create","flexDirection","flexWrap","alignItems","justifyContent","defaultProps","propTypes","arrayOf","string","func","shape"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState, useEffect, Fragment, useCallback } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport ColorOption from './color-option';\n\nconst ColorPalette = (props) => {\n  const {\n    colors,\n    defaultColor,\n    icon,\n    onChange,\n    paletteStyles,\n    scaleToWindow,\n    title,\n    titleStyles,\n    value,\n  } = props;\n  const [color, setColor] = useState(value || defaultColor);\n  \n  useEffect(() => {\n    value && setColor(value);\n  }, [value]);\n\n  const onColorChange = useCallback((color) => {\n    setColor(color);\n    onChange(color);\n  }, [onChange]);\n\n  return (\n    <Fragment>\n      <Text style={[styles.titleStyles, { ...titleStyles }]}>{title}</Text>\n      <View style={[styles.colorContainer, { ...paletteStyles }]}>\n        {colors.map((c) => (\n          <ColorOption\n            key={c}\n            color={c}\n            icon={icon}\n            onColorChange={onColorChange}\n            scaleToWindow={scaleToWindow}\n            isSelected={value ? value ===c : color ===c}\n          />\n        ))}\n      </View>\n    </Fragment>\n  );\n}\n\nconst styles = StyleSheet.create({\n  titleStyles: {\n    color: 'black',\n  },\n  colorContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nColorPalette.defaultProps = {\n  colors: [\n    '#C0392B', '#E74C3C', '#9B59B6', '#8E44AD', '#2980B9', '#3498DB', '#1ABC9C',\n    '#16A085', '#27AE60', '#2ECC71', '#F1C40F', '#F39C12', '#E67E22', '#D35400',\n    '#FFFFFF', '#BDC3C7', '#95A5A6', '#7F8C8D', '#34495E', '#2C3E50', '#000000',\n  ],\n  defaultColor: null,\n  onChange: () => { },\n  paletteStyles: {},\n  scaleToWindow: false,\n  title: \"Color Palette:\",\n  titleStyles: {},\n  value: null,\n};\n\nColorPalette.propTypes = {\n  colors: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string,\n  onChange: PropTypes.func,\n  defaultColor: PropTypes.string,\n  value: PropTypes.string,\n  paletteStyles: PropTypes.shape({})\n};\n\nexport default ColorPalette;\n"]},"metadata":{},"sourceType":"module"}